@charset "UTF-8";
// 块的混合宏(mixin);

//块;
@mixin block($args:false){
	@if( $args ){
		display:block !important;
	}@else{
		display:block;
	}
}

//显示;
@mixin show($args:false){
    @include block($args);
}

//inline;
@mixin inline{
    display:inline;
}

//inline-block;
@mixin inblock{
	display:inline-block;
	@if( compatibility() ){
		*display: inline; *zoom: 1;
	}
}

//visibility显示隐藏;
@mixin v( $args:hidden ){
	visibility : $args;
}

//box(老版本的弹性盒模型);
@mixin box{
    @include css3(display,box,false,true);
}

//table;
@mixin table{
    display:table;
}

//none;
@mixin hide($args:false){ 
	@include none($args);
}

//none;
@mixin none($args:false){  
	@if( $args ){
		display:none !important;
	}@else{
		display:none;
	}
}

//怪异盒模型;
@mixin box-sz( $type: border-box ) {
  @include css3( box-sizing, $type );
}

//display;
@mixin display( $block:block ){
    @if( $block == 'flex' ){
		@include flex;
    }@else if( $block == 'box' ){
		@include box;
    }@else if( $block == 'flexbox' ){
		@include flexbox;
    }
    @else{
		display:$block;
    }
}

//设置元素可伸缩其尺寸;
@mixin box-fx( $value:1 ){
    @include css3(box-flex,$value,true,false);
}

//设置子元素应该被水平或垂直排列;
@mixin box-o( $value:horizontal ){
	//box-orient: horizontal(在水平行中从左向右排列子元素) 					|
	//			  vertical(从上向下垂直排列子元素)							|
	//			  inline-axis(沿着行内轴来排列子元素(映射为 horizontal) )	|
	//			  block-axis(沿着块轴来排列子元素(映射为 vertical) )		|
	//			  inherit(应该从父元素继承 box-orient 属性的值);
    @include css3(box-orient,$value,true,false);
}

//设置子元素水平排列;
@mixin horizontal{
	@include css3(box-orient,horizontal,true,false);
}

//设置子元素垂直排列;
@mixin vertical{
	@include css3(box-orient,vertical,true,false);
}

//反方向排列;
@mixin reverse{
	@include css3(box-direction,reverse,true,false);
}

//规定框元素的子元素方向排列;
@mixin box-dir( $value:reverse ){
	//normal(默认方向) | reverse(反方向) | inherit(应该从子元素继承 box-direction 属性的值)
	@include css3(box-direction,$value,true,false);
}

//默认方向方向排列;
@mixin no-box-dir{
	@include css3(box-direction,normal,true,false);
}

//对齐框的子元素;
@mixin box-a( $value:center ){
	//box-align: start(对于正常方向的框,上边缘沿着框的顶边放置|对于反方向的框,上边缘沿着框的底边放置)  |
	//			  end(对于正常方向的框,下边框沿着框的顶边放置|对于反方向的框,下边框沿着框的底边放置)   |													|
	//			  center(均等地分割多余的空间，一半位于子元素之上，另一半位于子元素之下 )			   |
	//			  baseline(如果 box-orient 是inline-axis或horizontal，所有子元素均与其基线对齐)		   |
	//			  stretch(拉伸子元素以填充包含块);
	@include css3(box-align,$value,true,false);
}

//flex(新版本的弹性盒模型);
@mixin flex{
    @include css3(display,flex,false,true);
}

//flex(据说最新~新版本的弹性盒模型);
@mixin flexbox{
    @include css3(display,flexbox,false,true);
}

//flex行内元素也可以使用 Flex 布局;
@mixin inflex{
    @include css3(display,inline-flex,false,true);
}

//flex分大小;
@mixin fx( $args:1 ){
	@include css3(flex,$args);
}

//flex主轴方向;
@mixin fx-dir( $args:row ){
	@include css3(flex-direction,$args);
}

//flex水平方向;
@mixin fx-row{
	@include fx-dir(row);	
}

//flex换行设置;
@mixin fx-w( $args:wrap ){
	@include css3(flex-wrap,$args);
}

//flex的fx-row&&flex-wrap组合;
@mixin fx-f( $args:row wrap ){
	@include css3(flex-flow,$args);
}

//flex的主轴上的对齐方式;
@mixin jc( $args:flex-start ){
	@include css3(justify-content,$args);
}

//flex的交叉轴上对齐方式;
@mixin ai( $args:flex-start ){
	@include css3(align-items,$args);
}

//flex的多根轴线的对齐方式;
@mixin ac( $args:flex-start ){
	@include css3(align-content,$args);
}

//flex-basis属性允许单个项目有与其他项目不一样的对齐方式;
@mixin as( $args:1px ){
	@include css3(align-self,addUnits($args));
}

//判断水平属性;
@mixin _if-fxdir( $args:jc,$args2:flex-start ){
	@if( $args == 'jc' ){
		@include jc($args2);
	}@else if( $args == 'ai' ){
		@include ai($args2);
	}@else if( $args == 'ac' ){
		@include ac($args2);
	}@else if( $args == 'as' ){
		@include as($args2);
	}
}

//默认水平从左到右;
@mixin fx-start( $args:jc ){
	@include _if-fxdir($args,flex-start);
}

//水平从右到左;
@mixin fx-end( $args:jc ){
	@include _if-fxdir($args,flex-end);
}

//水平居中;
@mixin fx-center( $args:jc ){
	@include _if-fxdir($args,center);
}

//水平两端对齐,项目之间的间隔都相等;
@mixin fx-between( $args:jc ){
	@include _if-fxdir($args,space-between);
}

//水平每个项目两侧的间隔相等;
@mixin fx-around( $args:jc ){
	@include _if-fxdir($args,space-around);
}

//垂直项目的第一行文字的基线对齐;
@mixin fx-baseline{
	@include ai(baseline);
}

//垂直默认值项目的第一行文字的基线对齐;
@mixin fx-stretch( $args:ac ){
	@include _if-fxdir($args,stretch);
}

//order排列顺序:数值越小,排列越靠前,默认为0;
@mixin odr( $args:1 ){
	@include css3(order,$args);
}

//flex-grow项目的放大比例,默认为0;
@mixin fx-g( $args:1 ){
	@include css3(flex-grow,$args);
}

//flex-shrink项目的缩小比例,默认为1;
@mixin fx-s( $args:1 ){
	@include css3(flex-shrink,$args);
}

//flex-basis定义了在分配多余空间之前，项目占据的主轴空间;
@mixin fx-b( $args:1px ){
	@include css3(flex-basis,addUnits($args));
}

//网格;
@mixin gd{
	display:grid;
}

//网格行;
@mixin gd-t-cols( $args... ){
	grid-template-columns:$args;
}

//网格列;
@mixin gd-t-rows( $args... ){
	grid-template-rows:$args;
}

//网格列与列的间距;
@mixin gd-row-gap( $args... ){
	grid-row-gap:$args;
}

//网格行与行的间距;
@mixin gd-column-gap( $args... ){
	grid-column-gap:$args;
}

//网格行&&列的间距;
@mixin gd-gap( $args... ){
	grid-gap:$args;
}

//网格线行向定位开始;
@mixin gd-col-start( $args... ){
	grid-column-start:$args; 
}

//网格线行向定位结束;
@mixin gd-col-end( $args... ){
	grid-column-end:$args; 
}

//网格线列向定位开始&&结束;
@mixin gd-col( $args... ){
	grid-column:$args; 
}

//网格线列向定位开始;
@mixin gd-row-start( $args... ){
	grid-row-start:$args; 
}

//网格线列向定位结束;
@mixin gd-row-end( $args... ){
	grid-row-end:$args; 
}

//网格线列向定位开始&&结束;
@mixin gd-row( $args... ){
	grid-row:$args; 
}

//隐式网格的行;
@mixin gd-auto-rows( $args... ){
	grid-auto-rows:$args;
}

//创建网格区域名称;
@mixin gd-area( $args... ){
	grid-area:$args; 
}

//创建多个网格名称;
@mixin gd-t-areas( $args... ){
	grid-template-areas:$args;
}

//网格水平开始位置;
@mixin ji( $args... ){
	justify-items:$args;
}

//网格自身对齐方式;
@mixin js( $args... ){
	justify-self:$args;
}

